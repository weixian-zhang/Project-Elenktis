FROM microsoft/dotnet:2.2-sdk AS installer-env

WORKDIR /src

COPY CommonLib /src/CommonLib/

COPY Informer/MandateServiceInformer /src/Informer/MandateServiceInformer/

WORKDIR /src/CommonLib/Elenktis.Common.AzResourceManager
RUN dotnet restore Elenktis.Common.AzResourceManager.csproj

WORKDIR /src/CommonLib/Elenktis.Common.Configuration
RUN dotnet restore Elenktis.Common.Configuration.csproj

WORKDIR /src/CommonLib/Elenktis.Common.Messaging
RUN dotnet restore Elenktis.Common.Messaging.csproj

WORKDIR /src/CommonLib/Elenktis.Common.Command
RUN dotnet restore Elenktis.Common.Command.csproj

WORKDIR /src/Informer/MandateServiceInformer

RUN cd /src/Informer/MandateServiceInformer/ && \
    mkdir -p /home/site/wwwroot && \
    dotnet publish -c Debug --output /home/site/wwwroot

FROM mcr.microsoft.com/azure-functions/dotnet:latest

ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
 AzureFunctionsJobHost__Logging__Console__IsEnabled=true 

COPY --from=installer-env ["/home/site/wwwroot", "/home/site/wwwroot"]

RUN apt-get install azure-functions-core-tools \
&& func host start --no-build --script-root '/home/site/wwwroot/MandateServiceInformer/bin'

# for remote SSH debugging
RUN apt-get update \ 
 && apt-get install -y --no-install-recommends openssh-server \ 
 && mkdir -p /run/sshd

ENV SSH_PASSWD "root:P@s$w0rd"

# Set password to 'Docker!'. Change as needed.  
#RUN echo "root:P@s$w0rd" | chpasswd

#Copy SSH settings file. See elsewhere to find them.
COPY Informer/MandateServiceInformer/ssh/sshd-config /src/etc/ssh/sshd_config/

#ssh key, if using password only comment this line
#COPY ./ssh/authorized_keys  root/.ssh/authorized_keys

RUN apt-get install zip unzip curl -y

# Install Visual Studio Remote Debugger
RUN curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l ~/vsdbg

#VS remote debugger uses port 2222
EXPOSE 2222

CMD ["/usr/sbin/sshd", "-D"]

#once func host start tested okie, below can be removed
#RUN apt-get update && \
 #   curl -O https://dot.net/v1/dotnet-install.sh && \
  #  source dotnet-install.sh --channel Current && \
   # rm dotnet-install.sh

#RUN echo "Starting Function Host..." \
#&& dotnet "/azure-functions-host/Microsoft.Azure.WebJobs.WebHost.dll"




# https://blog.quickbird.uk/debug-netcore-containers-remotely-9a103060b2ff
#https://iboware.com/development/2018/10/12/remote-debugging-asp-net-core-applications-on-kubernetes/